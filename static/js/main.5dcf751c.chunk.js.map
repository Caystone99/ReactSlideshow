{"version":3,"sources":["assets/slide1.jpg","assets/slide2.jpg","assets/slide3.jpg","assets/slide4.jpg","Slide.js","Slideshow.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","s","Slide","props","react_default","a","createElement","className","position","transition","src","image","alt","container","onScreen","offScreenRight","offScreenLeft","slides","slide1","slide2","slide3","slide4","Slideshow","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","startCarousel","setInterval","transitionSlides","_this$state","state","current","next","setState","setTimeout","resetSlideOffScreen","_this$state2","id","length","_this$state3","src_Slide","Component","App","src_Slideshow","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5dcf751c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/slide1.e6f3f6a3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/slide2.704543f2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/slide3.3f5aeab6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/slide4.7e82ddae.jpg\";","//===========================================\n// IMPORT DEPENDENCIES\n//===========================================\nimport React from \"react\";\n\nconst s = {\n    container: \"abs fullW fullH\",\n    slideImage: \"fullH fullW imgCover\"\n};\n\nconst Slide = props => {\n    return (\n        <div\n            className={\n                s.container + \" \" + props.position + \" \" + props.transition\n            }\n        >\n            <img src={props.image} className={s.slideImage} alt=\"slide\" />\n        </div>\n    );\n};\n\nexport default Slide;\n","//===========================================\n// IMPORT DEPENDENCIES\n//===========================================\nimport React, { Component } from \"react\";\nimport Slide from \"./Slide\";\nimport slide1 from \"./assets/slide1.jpg\";\nimport slide2 from \"./assets/slide2.jpg\";\nimport slide3 from \"./assets/slide3.jpg\";\nimport slide4 from \"./assets/slide4.jpg\";\n\n//===========================================\n// CREATE STYLES OBJECT\n//===========================================\nconst s = {\n    container: \"fullW fullH rel overflowH\",\n    onScreen: \"left0\",\n    offScreenRight: \"left100vw\",\n    offScreenLeft: \"leftM100vw\",\n    transition: \"transition2l\"\n};\n\n//===========================================\n// SLIDES ARRAY\n//===========================================\nconst slides = [slide1, slide2, slide3, slide4];\n\n//===========================================\n// SLIDESHOW COMPONENT\n//===========================================\nclass Slideshow extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: {\n                id: 0,\n                position: s.onScreen,\n                transition: true\n            },\n            next: {\n                id: 1,\n                position: s.offScreenRight,\n                transition: true\n            }\n        };\n    }\n\n    componentDidMount() {\n        this.startCarousel();\n    }\n\n    startCarousel = () => {\n        setInterval(() => {\n            this.transitionSlides();\n        }, 4000);\n    };\n\n    transitionSlides = () => {\n        const { current, next } = this.state;\n        if (current[\"position\"] === s.onScreen) {\n            current[\"position\"] = s.offScreenLeft;\n            next[\"position\"] = s.onScreen;\n        } else {\n            current[\"position\"] = s.onScreen;\n            next[\"position\"] = s.offScreenLeft;\n        }\n        this.setState({\n            current: current,\n            next: next\n        });\n        setTimeout(() => {\n            this.resetSlideOffScreen();\n        }, 2000);\n    };\n\n    resetSlideOffScreen = () => {\n        const { current, next } = this.state;\n        if (current[\"position\"] === s.offScreenLeft) {\n            current[\"transition\"] = false;\n            current[\"position\"] = s.offScreenRight;\n            current[\"id\"] = next.id + 1 === slides.length ? 0 : next.id + 1;\n        } else {\n            next[\"transition\"] = false;\n            next[\"position\"] = s.offScreenRight;\n            next[\"id\"] = current.id + 1 === slides.length ? 0 : current.id + 1;\n        }\n        this.setState({\n            current: current,\n            next: next\n        });\n        setTimeout(() => {\n            current[\"transition\"] = true;\n            next[\"transition\"] = true;\n            this.setState({\n                current: current,\n                next: next\n            });\n        }, 500);\n    };\n\n    render() {\n        const { current, next } = this.state;\n        return (\n            <div className={s.container}>\n                <Slide\n                    image={slides[current.id]}\n                    position={current.position}\n                    transition={current.transition ? s.transition : \"\"}\n                />\n                <Slide\n                    image={slides[next.id]}\n                    position={next.position}\n                    transition={next.transition ? s.transition : \"\"}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Slideshow;\n","//===========================================\n// IMPORT DEPENDENCIES\n//===========================================\nimport React, { Component } from \"react\";\nimport Slideshow from \"./Slideshow\";\n\n//===========================================\n// CREATE STYLES OBJECT\n//===========================================\nconst s = {\n    container: \"screenW screenH dGray col\",\n    header: \"flex1 fCenter fSize2\",\n    main: \"flex8 white\",\n    footer: \"flex1 fCenter\"\n};\n\n//===========================================\n// APP COMPONENT\n//===========================================\nclass App extends Component {\n    render() {\n        return (\n            <div className={s.container}>\n                <div className={s.header}>Automatic Slideshow Carousel</div>\n                <div className={s.main}>\n                    <Slideshow />\n                </div>\n                <div className={s.footer}>Built in React - by Ashwanth A R</div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./custom.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}